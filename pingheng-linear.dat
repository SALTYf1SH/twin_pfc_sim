; Contact model properties
[emod   = 1.0e10]  ; Young's modulus (deformability method) [Pa]
[kratio = 2.0  ]  ; stiffness ratio (deformability method) [-]
[dpm    = 3    ]  ; dashpot mode                           [-]
;[fric   = 0.01 ]  ; friction coefficient                   [-]
;[dpnr   = 0.2  ]  ; normal critical damping ratio          [-]
;[dpsr   = 0.2  ]  ; shear critical damping ratio           [-]
;[rfric  = 0.0  ]  ; rolling resistance coefficient         [-]
;[F0     = 1e2  ]  ; maximum attractive force               [N]
;[D0     = 0.0  ]  ; attraction range                       [m]

fish define contact_group

    loop foreach local cp contact.list                                                         ; loop over all defined contacts
        if type.pointer(cp) = 'ball-ball'                                                      ; if the type of the contact `cp` is 'ball-ball'
            if ball.group(contact.end1(cp), 'layer') # ball.group(contact.end2(cp), 'layer')   ; if piece1 and piece2 of the contact `cp` belong to different ball group
                contact.group(cp, "boundary") = 'pbond'                                         ; set the contact group of the contact `cp` to 'pbond_boundary'
            else
                local ball_group = ball.group(contact.end1(cp), 'layer')                        ; get the ball group with 'layer' slot of the contact `cp`
                contact.group(cp, "ballball") = ball_group                                      ; set the contact group of the contact `cp` to "contact_" + ball_group (with "Default=" removed)
            endif
        endif
        if type.pointer(cp) = 'ball-facet'                                                     ; if the type of the contact `cp` is 'ball-facet'
            local facet = contact.end2(cp)                                                     ; get the facet end of the contact
            local wall_id = wall.id(wall.facet.wall(facet))                                    ; get the wall id that owns this facet
            if wall_id # 1                                                                     ; if the facet belongs to wall 2 or 4
                contact.group(cp, "ballfacet") = 'side'                                        ; assign contact to group 'side'
            else
                contact.group(cp, "ballfacet") = 'bottom'
            endif
        endif
    endloop

end

fish callback remove @sevro_walls -1.0
wall delete walls range id 3
model clean all

@contact_group

; Defualt ball-ball contact model
contact cmat default type ball-ball model arrlinear ... 
 method deformability ... 
 emod @emod ... 
 kratio @kratio ... 
 property fric @fric ... 
 dp_nratio @dpnr ... 
 dp_sratio @dpsr ... 
 dp_mode @dpm ... 
 rr_fric @rfric ... 
 adh_F0 @F0 ... 
 adh_D0 @D0

; Ball-ball contact model for subsurface
contact cmat add 1 model arrlinear ... 
 method deformability ... 
 emod @emod ... 
 kratio @kratio ... 
 property fric @fric ... 
 dp_nratio @dpnr ... 
 dp_sratio @dpsr ... 
 dp_mode @dpm ... 
 rr_fric @rfric ... 
 adh_F0 @F0 ... 
 adh_D0 @D0 ...
 range contact group 'ballball=subsurface'

; Default ball-facet contact model
contact cmat default type ball-facet model rrlinear ... 
 method deformability ... 
 emod @emod ... 
 kratio 2e3 ... 
 property fric 1 ... 
 dp_nratio @dpnr ... 
 dp_sratio 0.5 ... 
 dp_mode 0 ... 
 rr_fric @rfric
 
; Default ball-facet contact model
contact cmat add 2 model arrlinear ... 
 method deformability ... 
 emod @emod ... 
 kratio @kratio ... 
 property fric 0 ... 
 dp_nratio 0 ... 
 dp_sratio 0 ... 
 dp_mode @dpm ... 
 rr_fric 0 ...
 adh_F0 [F0*1.5] ... 
 adh_D0 @rdmax ...
 range contact group 'ballfacet=side'
 
contact cmat add 3 model rrlinear ... 
 method deformability ... 
 emod @emod ... 
 kratio @kratio ... 
 property fric 0 ... 
 dp_nratio 0 ... 
 dp_sratio 0 ... 
 dp_mode @dpm ... 
 rr_fric 0 ...
 range contact group 'ballfacet=bottom'

; Ball-ball contact model for layer boundary
[pb_modules=1e9]
[emod000=1e9]
[ten_=5e4]
[coh_=5e4]
[fric=0.1]
[kratio=2.]

contact cmat add 4 model linearpbond ...
 method bond gap 0.5 ...
 method deform emod [emod000] krat [kratio] ...
 method pb_deform emod [pb_modules] kratio [kratio] ...
 property dp_nratio 0.5 dp_sratio 0.0 ...
 fric [fric] ...
 pb_rmul 1 pb_mcf 1 lin_mode 1 pb_ten [ten_] pb_coh [coh_] pb_fa 60 ...
 range contact group 'boundary=pbond'

; Ball-ball contact model for coal seam
[pb_modules=1e9]
[emod000=15e9]
[ten_=1.5e9]
[coh_=1.5e9]
[fric=1]
[kratio=2.]

contact cmat add 5 model linearpbond ...
 method bond gap 0.5 ...
 method deform emod [emod000] krat [kratio] ...
 method pb_deform emod [pb_modules] kratio [kratio] ...
 property dp_nratio 0.5 dp_sratio 0.0 ...
 fric [fric] ...
 pb_rmul 1 pb_mcf 1 lin_mode 1 pb_ten [ten_] pb_coh [coh_] pb_fa 60 ...
 range contact group 'ballball=1'

model clean all
contact cmat apply

;model gravity [9.8*wlx/wly]

model gravity 10
model cycle 1
model solve ratio-average 1e-3 or cycle 50000

; echo-line 'off'
; program call 'fracture.p2fis'
; @track_init
; echo-line 'on'

; model save 'pingheng'
